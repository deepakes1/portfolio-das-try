edited new personal info:


import React, { useState, useEffect, useCallback } from "react"
import axios from "axios"
import { useUser } from "@clerk/clerk-react"
import { Button } from "@/components/ui/button"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Card, CardContent, CardDescription, CardFooter, CardHeader, CardTitle } from "@/components/ui/card"
import { Avatar, AvatarFallback, AvatarImage } from "@/components/ui/avatar"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import { AlertCircle, Briefcase, Github, Linkedin, MapPin, Phone, User } from 'lucide-react'
import { Alert, AlertDescription, AlertTitle } from "@/components/ui/alert"
import GradualSpacing from "../components/ui/gradual-spacing";


const titlesList = [
  "Front-End Developer", "Full-Stack Engineer", "React.js Developer",
  "UI/UX Designer", "Software Engineer", "Graphic Designer",
  "Backend Developer", "DevOps Engineer", "Data Scientist",
  "Product Manager", "Mobile Developer", "Cloud Architect",
  "Security Engineer", "Database Administrator", "AI Specialist",
  "Machine Learning Engineer", "Blockchain Developer",
  "Network Engineer", "Business Intelligence Analyst",
  "Systems Architect", "Game Developer", "Web Developer",
  "Application Developer", "Software Tester", "Cloud Engineer",
  "Digital Marketing Specialist", "Business Analyst", "DevOps Specialist",
  "Site Reliability Engineer", "Technical Support Engineer", "Product Designer",
  "Data Engineer", "Embedded Systems Engineer", "Research Scientist",
  "Automation Engineer", "IT Support Specialist", "Data Analyst",
  "Solutions Architect", "Blockchain Engineer", "UI Developer",
  "Cloud Solutions Architect", "Quantum Computing Specialist", "Enterprise Architect",
  "Voice UI Developer", "Data Visualization Specialist", "Security Analyst",
  "Agile Coach", "Scrum Master", "Interaction Designer",
  "Performance Engineer", "Compliance Analyst", "Network Security Engineer",
  "IT Project Manager", "Mobile App Designer", "Hardware Engineer",
  "Application Security Engineer", "Cloud Security Engineer", "Embedded Software Engineer",
  "Virtual Reality Developer", "Augmented Reality Developer", "IT Consultant",
  "Product Owner", "Systems Engineer", "Full-Stack Developer",
  "Cloud Operations Engineer", "Artificial Intelligence Engineer"
];



const PersonalInfo = ({ onNext }) => {
  const { user, isLoaded } = useUser()
  const [formData, setFormData] = useState({
    user_id: '',
    firstName: '',
    lastName: '',
    location: '',
    profilePicture: '',
    professionalTitle: '',
    customTitle: '',
    summary: '',
    socialLinks: { linkedIn: '', github: '' },
    mobileNumber: '',
    emailAddress: ''
  })

  const [filteredTitles, setFilteredTitles] = useState(titlesList)
  const [searchQuery, setSearchQuery] = useState('')
  const [isSubmitting, setIsSubmitting] = useState(false)
  const [errors, setErrors] = useState({})

  const handleChange = useCallback((name, value) => {
    if (name === 'profilePicture' && value instanceof FileList) {
      setFormData((prevData) => ({ ...prevData, [name]: value[0] }))
    } else {
      setFormData((prevData) => ({ ...prevData, [name]: value }))
    }
  }, [])

  useEffect(() => {
    if (!isLoaded) return

    if (user) {
      const user_id = user.primaryEmailAddress?.emailAddress
      if (user_id) {
        setFormData((prevData) => ({ ...prevData, user_id, emailAddress: user_id }))
        const fetchPersonalInfo = async () => {
          try {
            const response = await axios.get(`http://localhost:3000/api/personal-info?user_id=${user_id}`)
            if (response.data) {
              setFormData((prevData) => ({
                ...prevData,
                firstName: response.data.first_name || '',
                lastName: response.data.last_name || '',
                location: response.data.location || '',
                profilePicture: response.data.profile_picture || '', // Use the stored filename or URL
                professionalTitle: response.data.professional_title || '',
                customTitle: response.data.custom_title || '',
                summary: response.data.summary || '',
                socialLinks: {
                  linkedIn: response.data.linkedin || '',
                  github: response.data.github || ''
                },
                mobileNumber: response.data.mobile_number || '',
                emailAddress: response.data.email || ''
              }))
            }
          } catch (error) {
            console.error('Error fetching personal info:', error)
          }
        }
        fetchPersonalInfo()
      }
    }
  }, [user, isLoaded])

  const handleSubmit = async (e) => {
    e.preventDefault()
    setIsSubmitting(true)

    const newErrors = {}

    if (!formData.firstName) newErrors.firstName = 'First name is required.'
    if (!formData.lastName) newErrors.lastName = 'Last name is required.'
    if (!formData.location) newErrors.location = 'Location is required.'
    if (!formData.summary) newErrors.summary = 'Summary is required.'
    if (!formData.mobileNumber) newErrors.mobileNumber = 'Mobile number is required.'
    if (!formData.emailAddress) newErrors.emailAddress = 'Email is required.'

    if (Object.keys(newErrors).length > 0) {
      setErrors(newErrors)
      setIsSubmitting(false)
      return
    }

    const dataToSend = new FormData()
    dataToSend.append('user_id', formData.user_id)
    dataToSend.append('firstName', formData.firstName)
    dataToSend.append('lastName', formData.lastName)
    dataToSend.append('mobileNumber', formData.mobileNumber)
    dataToSend.append('location', formData.location)
    if (formData.profilePicture && formData.profilePicture instanceof File) {
      dataToSend.append('profilePicture', formData.profilePicture)
    } else {
      dataToSend.append('profilePicture', formData.profilePicture || null)
    }
    dataToSend.append('professionalTitle', formData.professionalTitle)
    dataToSend.append('customTitle', formData.professionalTitle === 'Other' ? formData.customTitle : '')
    dataToSend.append('summary', formData.summary)
    dataToSend.append('socialLinks', JSON.stringify(formData.socialLinks))
    dataToSend.append('emailAddress', formData.emailAddress)

    try {
      await axios.post('http://localhost:3000/api/personal-info', dataToSend, {
        headers: { 'Content-Type': 'multipart/form-data' }
      })
      alert('Personal information saved successfully!')
      onNext()
    } catch (error) {
      console.error('Error submitting form:', error)
      alert(`Error: ${error.response?.data?.message || 'Something went wrong.'}`)
    } finally {
      setIsSubmitting(false)
    }
  }

  return (
    <div className="container mx-auto px-4 py-8">
      <Card className="w-full max-w-4xl mx-auto">
        <CardHeader>
          <GradualSpacing
            className="text-lg md:text-3xl font-bold -tracking-widest text-left text-black dark:text-white"
            text="Personal Information"
          />
          <CardDescription>Let's get to know you better. Fill in your details below.</CardDescription>
        </CardHeader>
        <CardContent>
          <form onSubmit={handleSubmit}>
            <div className="space-y-4">
              {/* Profile Picture, Name, and Location */}
              <div className="flex flex-col md:flex-row items-center space-x-4 space-y-4 md:space-y-0">
                <Avatar className="w-24 h-24">
                  <AvatarImage
                    src={
                      formData.profilePicture
                        ? formData.profilePicture instanceof File
                          ? URL.createObjectURL(formData.profilePicture)
                          : formData.profilePicture // Show the URL if available
                        : null // No image available
                    }
                  />
                  <AvatarFallback>
                    <User className="w-12 h-12" />
                  </AvatarFallback>
                </Avatar>

                <div>
                  <Label htmlFor="profilePicture">Profile Picture</Label>
                  <Input
                    id="profilePicture"
                    type="file"
                    onChange={(e) => handleChange('profilePicture', e.target.files)}
                    className="mt-1"
                  />
                  {formData.profilePicture && !(formData.profilePicture instanceof File) && (
                    <p className="mt-2 text-gray-500">Current File: {formData.profilePicture}</p>
                  )}
                </div>
              </div>

              {/* First Name, Last Name, Location */}
              <div className="space-y-4">
                <div>
                  <Label htmlFor="firstName">First Name</Label>
                  <Input
                    id="firstName"
                    value={formData.firstName}
                    onChange={(e) => handleChange('firstName', e.target.value)}
                    placeholder="Enter your first name"
                    className="text-sm"
                  />
                </div>
                <div>
                  <Label htmlFor="lastName">Last Name</Label>
                  <Input
                    id="lastName"
                    value={formData.lastName}
                    onChange={(e) => handleChange('lastName', e.target.value)}
                    placeholder="Enter your last name"
                    className="text-sm"
                  />
                </div>
                <div>
                  <Label htmlFor="location">Location</Label>
                  <Input
                    id="location"
                    value={formData.location}
                    onChange={(e) => handleChange('location', e.target.value)}
                    placeholder="e.g., New York, USA"
                    className="text-sm"
                  />
                </div>
              </div>

              {/* Mobile Number, Email */}
              <div className="space-y-4">
                <div>
                  <Label htmlFor="mobileNumber">Mobile Number</Label>
                  <Input
                    id="mobileNumber"
                    value={formData.mobileNumber}
                    onChange={(e) => handleChange('mobileNumber', e.target.value)}
                    placeholder="Enter your mobile number"
                    className="text-sm"
                  />
                </div>
                <div>
                  <Label htmlFor="emailAddress">Email Address</Label>
                  <Input
                    id="emailAddress"
                    value={formData.emailAddress}
                    onChange={(e) => handleChange('emailAddress', e.target.value)}
                    placeholder="Enter your email address"
                    className="text-sm"
                  />
                </div>
              </div>

              {/* Social Links */}
              <div className="space-y-4">
                <div>
                  <Label htmlFor="linkedIn">LinkedIn</Label>
                  <Input
                    id="linkedIn"
                    value={formData.socialLinks.linkedIn}
                    onChange={(e) => handleChange('socialLinks', { ...formData.socialLinks, linkedIn: e.target.value })}
                    placeholder="Enter LinkedIn URL"
                    className="text-sm"
                  />
                </div>
                <div>
                  <Label htmlFor="github">GitHub</Label>
                  <Input
                    id="github"
                    value={formData.socialLinks.github}
                    onChange={(e) => handleChange('socialLinks', { ...formData.socialLinks, github: e.target.value })}
                    placeholder="Enter GitHub URL"
                    className="text-sm"
                  />
                </div>
              </div>

              {/* Professional Title and Summary */}
              <div className="space-y-4">
                <div>
                  <Label htmlFor="professionalTitle">Professional Title</Label>
                  <Input
                    id="professionalTitle"
                    value={formData.professionalTitle}
                    onChange={(e) => handleChange('professionalTitle', e.target.value)}
                    placeholder="Enter your professional title"
                    className="text-sm"
                  />
                </div>
                {formData.professionalTitle === 'Other' && (
                  <div>
                    <Label htmlFor="customTitle">Custom Title</Label>
                    <Input
                      id="customTitle"
                      value={formData.customTitle}
                      onChange={(e) => handleChange('customTitle', e.target.value)}
                      placeholder="Enter custom title"
                      className="text-sm"
                    />
                  </div>
                )}
                <div>
                  <Label htmlFor="summary">Summary</Label>
                  <Input
                    id="summary"
                    value={formData.summary}
                    onChange={(e) => handleChange('summary', e.target.value)}
                    placeholder="Enter a brief summary"
                    className="text-sm"
                  />
                </div>
              </div>
            </div>
          </form>
        </CardContent>

        <CardFooter>
          <Button onClick={handleSubmit} disabled={isSubmitting} className="w-full">
            {isSubmitting ? 'Saving...' : 'Save and Continue'}
          </Button>
        </CardFooter>
      </Card>
    </div>
  )
}

export default PersonalInfo